// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Les enums de User: roles utilisateurs
enum Role {
  admin
  owner
  tenant
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  surname     String
  phoneNumber String?
  password    String
  role        Role?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  // Classes enfants :
  owner       Owner?
  tenant      Tenant?
}

model Owner {
  // Clés étrangères
  // Utilisateur
  // userId est à la fois une clé étrangère, référant à User, et la clé primaire de Owner
  userId     Int         @unique
  user       User        @relation(fields: [userId], references: [id])
  // Adresse
  addressId  Int?        @unique
  address    Address?    @relation(fields: [addressId], references: [id])
  // Lien vers la table owner_has_location
  ownerships Ownership[]
}

model Tenant {
  // Clés étrangères
  // Utilisateur
  // userId est à la fois une clé étrangère, référant à User, et la clé primaire de Tenant
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  // Lien vers la table tenant_has_location
  tenancies Tenancy[]
}

// Modèle de la table owner_has_location
model Ownership {
  // Clés étrangères
  ownerId    Int
  locationId Int
  owner      Owner    @relation(fields: [ownerId], references: [userId])
  location   Location @relation(fields: [locationId], references: [id])

  acquiredAt DateTime

  // Clé primaire : paire des clés étrangères
  @@id([ownerId, locationId])
}

// Modèle de la table tenant_has_location
model Tenancy {
  // Clés étrangères
  tenantId   Int
  locationId Int
  tenant     Tenant   @relation(fields: [tenantId], references: [userId])
  location   Location @relation(fields: [locationId], references: [id])

  moveInDate  DateTime
  moveOutDate DateTime?

  // Clé primaire : paire des clés étrangères
  @@id([tenantId, locationId])
}

model Address {
  id                Int      @id @default(autoincrement())
  streetNumber      String
  streetTypeAndName String
  additionalInfos   String?
  city              String
  zipCode           String
  country           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  // Relation:
  owners Owner[]
}

// Les enums de Location: 
// 1 - Les types de biens à louer
enum LocationType {
  appartment
  house
  room
  parking
  storage
}

// 2 - Les scores DPE
enum EPDScore {
  A
  B
  C
  D
  E
  F
  G
}

model Location {
  id         Int           @id @default(autoincrement())
  name       String?
  type       LocationType?
  rooms      Int?
  EPD        EPDScore?
  surface    Int?
  furnished  Boolean       @default(false)
  rented     Boolean       @default(false)
  rent       Decimal?
  ownerships Ownership[]
  tenancies  Tenancy[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now()) @updatedAt
}
